LEX: LPAREN "("
LEX: LPAREN "("
LEX: LET "let"
LEX: LPAREN "("
LEX: SYMBOL "f"
LEX: LAMBDA "lambda"
LEX: LPAREN "("
LEX: SYMBOL "x"
LEX: SYMBOL "y"
LEX: RPAREN ")"
BISON: arg_list ::= SYMBOL 
BISON: arg_list ::= SYMBOL arg_list 
LEX: LPAREN "("
LEX: FUNC "add"
LEX: SYMBOL "x"
BISON: s_expr ::= SYMBOL 
LEX: SYMBOL "y"
BISON: s_expr ::= SYMBOL 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: let_elem ::= LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN 
LEX: RPAREN ")"
BISON: let_section ::= let_list 
BISON: let_section ::= let_list 
LEX: LPAREN "("
LEX: SYMBOL "f"
LEX: LPAREN "("
LEX: FUNC "sub"
LEX: INT "5"
BISON: number ::= INT 
BISON: s_expr ::= number 
LEX: INT "2"
BISON: number ::= INT 
BISON: s_expr ::= number 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: LPAREN "("
LEX: FUNC "mult"
LEX: INT "2"
BISON: number ::= INT 
BISON: s_expr ::= number 
LEX: INT "3"
BISON: number ::= INT 
BISON: s_expr ::= number 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN SYMBOL s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: s_expr ::= LPAREN let_section s_expr RPAREN 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
LEX: LPAREN "("
LEX: LPAREN "("
LEX: LET "let"
LEX: LPAREN "("
LEX: SYMBOL "x"
LEX: LAMBDA "lambda"
LEX: LPAREN "("
LEX: RPAREN ")"
LEX: LPAREN "("
LEX: FUNC "rand"
LEX: RPAREN ")"
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: let_elem ::= LPAREN SYMBOL LAMBDA LPAREN arg_list RPAREN s_expr RPAREN 
LEX: RPAREN ")"
BISON: let_section ::= let_list 
BISON: let_section ::= let_list 
LEX: LPAREN "("
LEX: FUNC "add"
LEX: LPAREN "("
LEX: FUNC "print"
LEX: LPAREN "("
LEX: SYMBOL "x"
LEX: RPAREN ")"
BISON: f_expr ::= LPAREN SYMBOL s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: LPAREN "("
LEX: FUNC "print"
LEX: LPAREN "("
LEX: SYMBOL "x"
LEX: RPAREN ")"
BISON: f_expr ::= LPAREN SYMBOL s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: s_expr_list ::= s_expr 
BISON: s_expr_list ::= s_expr s_expr_list 
BISON: s_expr_section ::= s_expr_list 
BISON: f_expr ::= LPAREN FUNC s_expr_section RPAREN 
BISON: s_expr ::= f_expr 
LEX: RPAREN ")"
BISON: s_expr ::= LPAREN let_section s_expr RPAREN 
LEX: EOL "
"
BISON: program ::= s_expr EOL 
